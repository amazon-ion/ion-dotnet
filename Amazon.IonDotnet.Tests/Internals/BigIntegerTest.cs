﻿/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

using System;
using System.Collections.Immutable;
using System.IO;
using System.Numerics;
using System.Text;

namespace Amazon.IonHashDotnet.Tests
{
    using Amazon.IonDotnet.Builders;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class BigIntegerTest
    {
        [TestMethod]
        public void TestLargeNegativeInt()
        {
            var expected = BigInteger.Parse(
                "-10386193132828768511650942041097946556528556280326294976" +
                "830716527374613866266053821548081910442478515448889232458" +
                "686441609837892283981510185420164452852913701054817415485" +
                "917964960608946898600784984440767589149475212892713317317" +
                "788635808868058448157426059485484474034135892771614482794" +
                "643081563770686772491835340730475363855599331227685990921" +
                "818875771917092764284082356075008598818748845560405142558" +
                "998474389141860145018893606112625090956188859225017501251" +
                "491910628876068478502523392173793457667555946530350343421" +
                "525599975410367689165661853099910783975258109257009655117" +
                "191104674955980090016595222078269079251405233288240024070" +
                "283549176444544724347377243322578208435414140549340423359" +
                "177037924195351396505197864426864585179649280812108113958" +
                "334079073694815461263242760874118816267817696548243964691" +
                "828404769120386952638346282964432212444815100381827588684" +
                "123213501390168516360245854982243060089497918076475520091" +
                "100296631305885093957411063054280496305069080583815114600" +
                "487398023488573479515316046917417334254052243415738507487" +
                "842706347476696757993729956585660058743634169339298140299" +
                "689603025365105800567124176085364969870175965162165765759" +
                "768935915035948575971490093181913369811016966489562069975" +
                "05147919847908049246926031885699829927");

            var src = new byte[] {
                0xe0, 0x01, 0x00, 0xea,  // IVM

                // one encoding of the expected int:
                0x3e, 0x04, 0x81, 0x00, 0xfe, 0x95, 0xf4, 0xcf, 0xf1, 0x9a, 0x8e, 0xe2,
                0xed, 0xbb, 0xee, 0x30, 0xc7, 0xc0, 0xac, 0xbb, 0x83, 0xbf, 0xc4, 0xc0, 0xa5, 0x8e, 0x8b, 0x94,
                0xbb, 0x62, 0x50, 0xae, 0xea, 0xf3, 0xdb, 0x8f, 0x41, 0xb0, 0xac, 0xdb, 0xb9, 0x4b, 0x99, 0x0c,
                0x51, 0x8d, 0x96, 0xc5, 0xee, 0x3c, 0x02, 0xe2, 0x76, 0xe0, 0x6e, 0x07, 0x57, 0x0a, 0x2b, 0x6e,
                0x5d, 0xea, 0x9f, 0xe4, 0xfa, 0xc8, 0x47, 0x5a, 0x84, 0xef, 0xca, 0x8a, 0x84, 0x32, 0xd6, 0xd4,
                0x63, 0xbf, 0x0c, 0xeb, 0x47, 0x0b, 0x4a, 0xd9, 0xb3, 0xb0, 0xc8, 0x07, 0x30, 0x49, 0x2e, 0x5e,
                0xe6, 0x60, 0xbc, 0xa8, 0x69, 0x32, 0xd9, 0x33, 0xc4, 0x71, 0xf1, 0x78, 0x14, 0x0c, 0x52, 0x56,
                0xaf, 0xfe, 0x4e, 0xf5, 0xc0, 0x40, 0x4d, 0x74, 0xb4, 0xb7, 0x77, 0x6e, 0x77, 0x17, 0x8b, 0x32,
                0x81, 0xe1, 0xc5, 0xb6, 0x5a, 0xd8, 0x86, 0x6b, 0xcb, 0xaa, 0x62, 0x25, 0xc4, 0xe1, 0xc5, 0xb9,
                0x62, 0x4b, 0x19, 0xdc, 0xc6, 0x00, 0x1a, 0xfc, 0x35, 0x35, 0xa3, 0x76, 0x9c, 0x8e, 0x93, 0x7b,
                0x7e, 0x3f, 0x90, 0x73, 0xab, 0x00, 0x53, 0xcc, 0x0f, 0xfe, 0xb3, 0x41, 0x24, 0xd5, 0xd5, 0x70,
                0x74, 0x9d, 0x01, 0x81, 0xf4, 0xd4, 0xde, 0xdc, 0xed, 0x7d, 0x28, 0xf0, 0x38, 0x24, 0x7b, 0xef,
                0xa1, 0x8c, 0xe0, 0x2a, 0x3d, 0x12, 0x93, 0xda, 0x63, 0x7b, 0xb1, 0xab, 0x65, 0x98, 0xbb, 0x66,
                0x17, 0xa6, 0xa5, 0xce, 0x05, 0x12, 0xc3, 0x90, 0x23, 0x6d, 0xbc, 0xa2, 0x83, 0xad, 0xf0, 0x29,
                0x1e, 0x69, 0x03, 0xfb, 0xd6, 0x81, 0x9d, 0x4c, 0x5a, 0x82, 0x16, 0xc6, 0x9e, 0x20, 0x83, 0xda,
                0x5b, 0x3f, 0xef, 0xb0, 0x92, 0x8b, 0x20, 0x83, 0x45, 0xa3, 0x92, 0x07, 0xc8, 0x46, 0x1e, 0x38,
                0xf7, 0x93, 0x03, 0x61, 0x46, 0x10, 0x75, 0x59, 0xad, 0xf2, 0xf4, 0x06, 0x12, 0xd2, 0x5f, 0x14,
                0xd4, 0x5d, 0x7e, 0x27, 0x80, 0xb4, 0x5e, 0x2c, 0xf9, 0xb5, 0x79, 0x0d, 0x91, 0xaa, 0xaf, 0x32,
                0x7a, 0xf3, 0x32, 0x3e, 0x20, 0x24, 0x2c, 0x26, 0x32, 0xa6, 0x47, 0x25, 0x84, 0x4f, 0x1d, 0x9e,
                0x21, 0x8a, 0xab, 0x0d, 0x56, 0xee, 0x99, 0xae, 0x48, 0x60, 0x34, 0xd7, 0xb3, 0xfb, 0xfc, 0x4d,
                0xce, 0x8c, 0x9c, 0xc2, 0xa7, 0x93, 0xce, 0x93, 0xaf, 0xfe, 0x81, 0xde, 0xe7, 0x15, 0x8d, 0xad,
                0x7f, 0x06, 0x23, 0xce, 0x69, 0x2c, 0x8e, 0xd0, 0x97, 0x5d, 0xbe, 0xef, 0x9a, 0x71, 0x7a, 0x0b,
                0x63, 0xf9, 0x0a, 0xf4, 0xfe, 0xbc, 0x96, 0x78, 0x5a, 0x6f, 0xf4, 0xe0, 0x6b, 0x09, 0x0a, 0x65,
                0xd3, 0x3c, 0x98, 0x93, 0x2d, 0xf3, 0x9f, 0x7c, 0x5b, 0x80, 0x79, 0x56, 0xa1, 0x98, 0x97, 0xe0,
                0xc3, 0x46, 0x30, 0x46, 0xdf, 0x2e, 0xb4, 0xdf, 0x62, 0x4c, 0x7c, 0x43, 0xbe, 0xf4, 0x8f, 0xab,
                0x38, 0x1a, 0x85, 0x7b, 0x9f, 0x5b, 0x6c, 0x1b, 0xdb, 0xd6, 0xb3, 0x27, 0x0c, 0x10, 0x7c, 0xd3,
                0xbc, 0x1c, 0x41, 0xfe, 0x04, 0xe1, 0xdd, 0xac, 0x69, 0xf1, 0x41, 0x19, 0xde, 0x96, 0x1a, 0xf7,
                0x73, 0x28, 0x55, 0x44, 0xf8, 0x19, 0xf3, 0x95, 0x15, 0x42, 0xf7, 0x04, 0xb5, 0x01, 0xff, 0x03,
                0x64, 0xbf, 0x54, 0xd1, 0x4a, 0x86, 0xe1, 0x9b, 0xec, 0x39, 0x39, 0x4c, 0x85, 0xa6, 0xb2, 0x56,
                0xc6, 0x23, 0x3d, 0xa8, 0x01, 0xa4, 0x4f, 0x5d, 0xb9, 0x8c, 0xcd, 0xd8, 0xd9, 0xbb, 0x67, 0x88,
                0xc0, 0x14, 0x21, 0x6d, 0xd5, 0x7c, 0xb6, 0x45, 0x73, 0x33, 0x3c, 0xee, 0xd5, 0xb5, 0xc7, 0x2a,
                0x4e, 0xe2, 0x96, 0xe7, 0x5b, 0x3e, 0x32, 0xed, 0x69, 0x08, 0x36, 0x75, 0xa6, 0xa8, 0xf6, 0xb8,
                0xac, 0x85, 0xde, 0xae, 0xd8, 0x8a, 0xd0, 0xa7,

                // the following bytes were produced by ion-python, and represent
                // another encoding of the expected int (the first few bytes differ):
                0x3e, 0x04, 0x80,       0xfe, 0x95, 0xf4, 0xcf, 0xf1, 0x9a, 0x8e, 0xe2,
                0xed, 0xbb, 0xee, 0x30, 0xc7, 0xc0, 0xac, 0xbb, 0x83, 0xbf, 0xc4, 0xc0, 0xa5, 0x8e, 0x8b, 0x94,
                0xbb, 0x62, 0x50, 0xae, 0xea, 0xf3, 0xdb, 0x8f, 0x41, 0xb0, 0xac, 0xdb, 0xb9, 0x4b, 0x99, 0x0c,
                0x51, 0x8d, 0x96, 0xc5, 0xee, 0x3c, 0x02, 0xe2, 0x76, 0xe0, 0x6e, 0x07, 0x57, 0x0a, 0x2b, 0x6e,
                0x5d, 0xea, 0x9f, 0xe4, 0xfa, 0xc8, 0x47, 0x5a, 0x84, 0xef, 0xca, 0x8a, 0x84, 0x32, 0xd6, 0xd4,
                0x63, 0xbf, 0x0c, 0xeb, 0x47, 0x0b, 0x4a, 0xd9, 0xb3, 0xb0, 0xc8, 0x07, 0x30, 0x49, 0x2e, 0x5e,
                0xe6, 0x60, 0xbc, 0xa8, 0x69, 0x32, 0xd9, 0x33, 0xc4, 0x71, 0xf1, 0x78, 0x14, 0x0c, 0x52, 0x56,
                0xaf, 0xfe, 0x4e, 0xf5, 0xc0, 0x40, 0x4d, 0x74, 0xb4, 0xb7, 0x77, 0x6e, 0x77, 0x17, 0x8b, 0x32,
                0x81, 0xe1, 0xc5, 0xb6, 0x5a, 0xd8, 0x86, 0x6b, 0xcb, 0xaa, 0x62, 0x25, 0xc4, 0xe1, 0xc5, 0xb9,
                0x62, 0x4b, 0x19, 0xdc, 0xc6, 0x00, 0x1a, 0xfc, 0x35, 0x35, 0xa3, 0x76, 0x9c, 0x8e, 0x93, 0x7b,
                0x7e, 0x3f, 0x90, 0x73, 0xab, 0x00, 0x53, 0xcc, 0x0f, 0xfe, 0xb3, 0x41, 0x24, 0xd5, 0xd5, 0x70,
                0x74, 0x9d, 0x01, 0x81, 0xf4, 0xd4, 0xde, 0xdc, 0xed, 0x7d, 0x28, 0xf0, 0x38, 0x24, 0x7b, 0xef,
                0xa1, 0x8c, 0xe0, 0x2a, 0x3d, 0x12, 0x93, 0xda, 0x63, 0x7b, 0xb1, 0xab, 0x65, 0x98, 0xbb, 0x66,
                0x17, 0xa6, 0xa5, 0xce, 0x05, 0x12, 0xc3, 0x90, 0x23, 0x6d, 0xbc, 0xa2, 0x83, 0xad, 0xf0, 0x29,
                0x1e, 0x69, 0x03, 0xfb, 0xd6, 0x81, 0x9d, 0x4c, 0x5a, 0x82, 0x16, 0xc6, 0x9e, 0x20, 0x83, 0xda,
                0x5b, 0x3f, 0xef, 0xb0, 0x92, 0x8b, 0x20, 0x83, 0x45, 0xa3, 0x92, 0x07, 0xc8, 0x46, 0x1e, 0x38,
                0xf7, 0x93, 0x03, 0x61, 0x46, 0x10, 0x75, 0x59, 0xad, 0xf2, 0xf4, 0x06, 0x12, 0xd2, 0x5f, 0x14,
                0xd4, 0x5d, 0x7e, 0x27, 0x80, 0xb4, 0x5e, 0x2c, 0xf9, 0xb5, 0x79, 0x0d, 0x91, 0xaa, 0xaf, 0x32,
                0x7a, 0xf3, 0x32, 0x3e, 0x20, 0x24, 0x2c, 0x26, 0x32, 0xa6, 0x47, 0x25, 0x84, 0x4f, 0x1d, 0x9e,
                0x21, 0x8a, 0xab, 0x0d, 0x56, 0xee, 0x99, 0xae, 0x48, 0x60, 0x34, 0xd7, 0xb3, 0xfb, 0xfc, 0x4d,
                0xce, 0x8c, 0x9c, 0xc2, 0xa7, 0x93, 0xce, 0x93, 0xaf, 0xfe, 0x81, 0xde, 0xe7, 0x15, 0x8d, 0xad,
                0x7f, 0x06, 0x23, 0xce, 0x69, 0x2c, 0x8e, 0xd0, 0x97, 0x5d, 0xbe, 0xef, 0x9a, 0x71, 0x7a, 0x0b,
                0x63, 0xf9, 0x0a, 0xf4, 0xfe, 0xbc, 0x96, 0x78, 0x5a, 0x6f, 0xf4, 0xe0, 0x6b, 0x09, 0x0a, 0x65,
                0xd3, 0x3c, 0x98, 0x93, 0x2d, 0xf3, 0x9f, 0x7c, 0x5b, 0x80, 0x79, 0x56, 0xa1, 0x98, 0x97, 0xe0,
                0xc3, 0x46, 0x30, 0x46, 0xdf, 0x2e, 0xb4, 0xdf, 0x62, 0x4c, 0x7c, 0x43, 0xbe, 0xf4, 0x8f, 0xab,
                0x38, 0x1a, 0x85, 0x7b, 0x9f, 0x5b, 0x6c, 0x1b, 0xdb, 0xd6, 0xb3, 0x27, 0x0c, 0x10, 0x7c, 0xd3,
                0xbc, 0x1c, 0x41, 0xfe, 0x04, 0xe1, 0xdd, 0xac, 0x69, 0xf1, 0x41, 0x19, 0xde, 0x96, 0x1a, 0xf7,
                0x73, 0x28, 0x55, 0x44, 0xf8, 0x19, 0xf3, 0x95, 0x15, 0x42, 0xf7, 0x04, 0xb5, 0x01, 0xff, 0x03,
                0x64, 0xbf, 0x54, 0xd1, 0x4a, 0x86, 0xe1, 0x9b, 0xec, 0x39, 0x39, 0x4c, 0x85, 0xa6, 0xb2, 0x56,
                0xc6, 0x23, 0x3d, 0xa8, 0x01, 0xa4, 0x4f, 0x5d, 0xb9, 0x8c, 0xcd, 0xd8, 0xd9, 0xbb, 0x67, 0x88,
                0xc0, 0x14, 0x21, 0x6d, 0xd5, 0x7c, 0xb6, 0x45, 0x73, 0x33, 0x3c, 0xee, 0xd5, 0xb5, 0xc7, 0x2a,
                0x4e, 0xe2, 0x96, 0xe7, 0x5b, 0x3e, 0x32, 0xed, 0x69, 0x08, 0x36, 0x75, 0xa6, 0xa8, 0xf6, 0xb8,
                0xac, 0x85, 0xde, 0xae, 0xd8, 0x8a, 0xd0, 0xa7,
            };

            var reader = IonReaderBuilder.Build(src);
            reader.MoveNext();
            Assert.AreEqual(expected, reader.BigIntegerValue());
            reader.MoveNext();
            Assert.AreEqual(expected, reader.BigIntegerValue());

            // writing and reading to confirm binary round-trip:
            var stream = new MemoryStream();
            var writer = IonBinaryWriterBuilder.Build(stream);
            writer.WriteInt(expected);
            writer.Finish();
            reader = IonReaderBuilder.Build(stream.GetBuffer());
            reader.MoveNext();
            Assert.AreEqual(expected, reader.BigIntegerValue());
        }
    }
}

